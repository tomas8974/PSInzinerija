@using System.Text.Json.Nodes
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JS


<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.BottomLeft" />
<EditForm Model="@loginModel" class="authentication-form" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="email" class="white-text">Email</label>
        <InputText id="email" class="form-control light-gray-input" @bind-Value="loginModel.Email" />
    </div>

    <div class="form-group">
        <label for="password" class="white-text">Password</label>
        <InputText id="password" class="form-control light-gray-input" @bind-Value="loginModel.Password" type="password" />
        <div class="d-flex justify-content-end mt-1">
            <NavLink href="forgot-password" class="forgot-password-link">
                Forgot Password?
            </NavLink>
        </div>
    </div>

    <div class="button-container" >
        <NavLink class="pageButton clickable-button" href="registration">
            Registration
        </NavLink>
        <button type="submit" class="pageButton clickable-button">Login</button>
    </div>
</EditForm>

@code {
    List<ToastMessage> messages = new();
    private LoginModel loginModel = new LoginModel();
    record ResponseObject(int status, string message);

    private async Task HandleLogin()
    {
        var url = "api/login?useCookies=true&useSessionCookies=true"; // Backend login URL
        var client = HttpClientFactory.CreateClient("BackendApi");
        var formData = new
        {
            email = loginModel.Email,
            password = loginModel.Password
        };

        var fullURL = client.BaseAddress + url;
        
        var responseObject = await JS.InvokeAsync<ResponseObject>("postLogin", fullURL, formData.email, formData.password);
        Console.WriteLine(responseObject.status);
        if (responseObject.status == StatusCodes.Status200OK)
        {
            NavigationManager.Refresh(true);
        } 
        else
        {
            Console.WriteLine($"Response message was: {responseObject.message}");
            JsonNode? node = JsonNode.Parse(responseObject.message);
            int? status = null;
            try {
                status = node?["status"]?.GetValue<int>();
            } catch {
                Console.WriteLine("Error parsing status");
            }
            ToastMessage message = new () {
                Type = ToastType.Danger,
                Title = "Login failed!",
                HelpText = $"{DateTime.Now}",
                Message = status == StatusCodes.Status401Unauthorized ? "Incorrect email or password." : "Unkown error."
            };
            messages.Add(message);
        }
    }

    public class LoginModel
    {
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
    }
}
