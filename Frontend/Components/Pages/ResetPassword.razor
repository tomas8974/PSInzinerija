@page "/reset-password"
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@inject ILogger<ResetPassword> Logger
@using Microsoft.AspNetCore.WebUtilities
@using System.Text.Json.Nodes

<h3 style="color: white;">Reset Your Password</h3>

@if (!string.IsNullOrEmpty(Message))
{
    <p style="color: white;">@Message</p>
}

@if (!IsSubmitted)
{
    <Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.BottomLeft" />
    <EditForm Model="resetModel" OnValidSubmit="HandleResetPassword">
        <InputText @bind-Value="resetModel.NewPassword" type="password" placeholder="New password" class="form-control" />
        <ValidationMessage For="@(() => resetModel.NewPassword)" />

        <button type="submit" class="btn btn-primary mt-2">Reset Password</button>
    </EditForm>
}

@code {
    List<ToastMessage> messages = new();
    private ResetPasswordModel resetModel = new();
    private string? Message;
    private bool IsSubmitted = false;

    protected override void OnInitialized()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query) is var query)
        {
            if (query.TryGetValue("email", out var email))
            {
                resetModel.Email = email!;
            }
            if (query.TryGetValue("code", out var code))
            {
                resetModel.ResetCode = code!;
            }
        }
    }

    private async Task HandleResetPassword()
    {
        var client = HttpClientFactory.CreateClient("BackendApi");
        var url = "api/resetPassword";
        var fullURL = client.BaseAddress + url;
        try
        {
            var response = await client.PostAsJsonAsync(fullURL, resetModel);
            Console.Write(response);
            if (response.IsSuccessStatusCode)
            {
                Message = "Password has been reset successfully! You can now log in.";
                IsSubmitted = true;
            }
            else
            {
                int? status = null;
                string? errorMessage = "";
                try
                {
                    status = (int) response.StatusCode;
                    JsonNode? node = JsonNode.Parse(await response.Content.ReadAsStringAsync());
                    errorMessage = node?["errors"]?.AsObject()?.Aggregate("", (a, p) =>
                    {
                        return a + "\n" + p.Key + ": " + p.Value?.AsArray()?.Aggregate("", (ag, node) => ag + node?.ToString() + " ");
                    });
                }
                catch
                {
                    Console.WriteLine("Error parsing status");
                }
                ToastMessage message = new()
                    {
                        Type = ToastType.Danger,
                        Title = "Password reset failed!",
                        HelpText = $"{DateTime.Now}",
                        Message = status == 400 ? errorMessage : "Unkown error."
                    };
                messages.Add(message);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error resetting password");
            Message = "An unexpected error occurred.";
        }
    }

    public class ResetPasswordModel
    {
        public string Email { get; set; } = string.Empty;
        public string ResetCode { get; set; } = string.Empty;
        public string NewPassword { get; set; } = string.Empty;
    }
}
